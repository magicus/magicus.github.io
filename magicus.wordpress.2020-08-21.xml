<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.1" created="2020-08-21 14:08" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>magicus</title>
	<link>http://mag.icus.se/blog</link>
	<description>Technology, magic, and the in-between</description>
	<pubDate>Fri, 21 Aug 2020 14:08:04 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://mag.icus.se/blog</wp:base_site_url>
	<wp:base_blog_url>http://mag.icus.se/blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>mag@icus.se</wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>magicus</wp:author_login><wp:author_email>mag@icus.se</wp:author_email><wp:author_display_name><![CDATA[magicus]]></wp:author_display_name><wp:author_first_name><![CDATA[Magnus]]></wp:author_first_name><wp:author_last_name><![CDATA[Ihse Bursie]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>benchmark</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[benchmark]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename>ipad</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ipad]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>linguistics</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[linguistics]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>linux</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[linux]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>9</wp:term_id><wp:category_nicename>music</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[music]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename>open-source</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[open source]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>pdf</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[pdf]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>airvideo</wp:tag_slug><wp:tag_name><![CDATA[airvideo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>ffmpeg</wp:tag_slug><wp:tag_name><![CDATA[ffmpeg]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>ipad</wp:tag_slug><wp:tag_name><![CDATA[ipad]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>lastfm</wp:tag_slug><wp:tag_name><![CDATA[last.fm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>6</wp:term_id><wp:tag_slug>linux</wp:tag_slug><wp:tag_name><![CDATA[linux]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug>music</wp:tag_slug><wp:tag_name><![CDATA[music]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>open-source</wp:tag_slug><wp:tag_name><![CDATA[open source]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>tag-cloud</wp:tag_slug><wp:tag_name><![CDATA[tag cloud]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>tagging</wp:tag_slug><wp:tag_name><![CDATA[tagging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>3</wp:term_id><wp:tag_slug>technology-blogging</wp:tag_slug><wp:tag_name><![CDATA[technology blogging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>ubuntu</wp:tag_slug><wp:tag_name><![CDATA[ubuntu]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.1</generator>

	<item>
		<title>About</title>
		<link>http://mag.icus.se/blog/about/</link>
		<pubDate>Tue, 29 Jul 2008 16:59:58 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false"></guid>
		<description></description>
		<content:encoded><![CDATA[This is my blog. There are many like it, but this one is mine.

My real name is Magnus Ihse Bursie; my friends most often call me "Ihse". I've been a computer geek since my first ZX Spectrum.

On this blog, I intend to share some of my enthusiasm, ideas and rants about technology with you. Welcome.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2008-07-29 18:59:58</wp:post_date>
		<wp:post_date_gmt>2008-07-29 16:59:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Detecting if gdb is attached</title>
		<link>http://mag.icus.se/blog/2008-08-10/detecting-if-gdb-is-attached/</link>
		<pubDate>Sun, 10 Aug 2008 11:39:09 +0000</pubDate>
		<dc:creator>magicus</dc:creator>
		<guid isPermaLink="false">http://mag.icus.se/blog/2008-08-10/detecting-if-gdb-is-attached/</guid>
		<description></description>
		<content:encoded><![CDATA[When writing programs that should be easy to debug, it is often useful to know if you are running with a debugger attached. In Linux, there is no reliable way of doing this, but you can make a clever hack that is quite okay. gdb and other debuggers work by using ptrace, but in Linux, only one process at a time can ptrace another. So, the trick is to try to ptrace ourselves, and if it fails, we can assume that we are running in a debugger. (Or in strace, for that matter.) Doing this properly requires starting a new thread, however. It's not very hard, but it's a bit tricky getting everything right, and Ihave the feeling I'm doing this over and over again.

<!--more-->

And there never seems to be any good code to find on Google, either. So, as a courtesy to the rest of the world, here is a code snippet:
<pre>
#include &lt;pthread.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;sys/ptrace.h&gt;static void*

static void*
test_trace(void* ignored)
{
	return (void*)ptrace(PTRACE_TRACEME, 0, NULL, NULL);
}

bool
is_debugger_attached(void)
{
	pthread_attr_t attr;
	void* result;
	pthread_t thread;

	pthread_attr_init(&amp;attr);
	pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);
	if (pthread_create(&amp;thread, &amp;attr, test_trace, NULL) != 0) {
		pthread_attr_destroy(&amp;attr);
		return false;
	}
	pthread_attr_destroy(&amp;attr);
	if (pthread_join(thread, &amp;result) != 0) {
		return false;
	}

	return result != NULL;
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2008-08-10 13:39:09</wp:post_date>
		<wp:post_date_gmt>2008-08-10 11:39:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>detecting-if-gdb-is-attached</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>883</wp:comment_id>
			<wp:comment_author><![CDATA[Christian Ruocco]]></wp:comment_author>
			<wp:comment_author_email>christian@wickware.co.za</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.145.37.82</wp:comment_author_IP>
			<wp:comment_date>2009-10-13 09:30:52</wp:comment_date>
			<wp:comment_date_gmt>2009-10-13 08:30:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice one. Your contribution is appreciated. I'm trying to throw together some decent anti-debugging routines to prevent reverse engineering. Dunno how successful this is going to be..]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>First post!</title>
		<link>http://mag.icus.se/blog/2008-07-29/first-post/</link>
		<pubDate>Tue, 29 Jul 2008 17:59:32 +0000</pubDate>
		<dc:creator>magicus</dc:creator>
		<guid isPermaLink="false">http://mag.icus.se/blog/2008-07-29/first-post/</guid>
		<description></description>
		<content:encoded><![CDATA[So, it seems I've gotten myself a blog. Keepin' up with the times, heh? I've tried doing things like this before (even though it wasn't called "blog" back then), but never succeeded in keeping them updates.

This time, however, I have a somewhat more narrow focus, which will hopefully help me to determine what to post, and when.

My intention is to write about technology; cool technology, new technology, technology with good usability. Ubiquitous technology. And about a hobby of mine: to run Linux on as many weird hardware targets as possible. :-)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2008-07-29 19:59:32</wp:post_date>
		<wp:post_date_gmt>2008-07-29 17:59:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-post</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="technology-blogging"><![CDATA[technology blogging]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>How to kill a healthy sentence</title>
		<link>http://mag.icus.se/blog/2008-09-04/how-to-kill-a-healthy-sentence/</link>
		<pubDate>Thu, 04 Sep 2008 13:23:44 +0000</pubDate>
		<dc:creator>magicus</dc:creator>
		<guid isPermaLink="false">http://mag.icus.se/blog/2008-09-04/how-to-kill-a-healthy-sentence/</guid>
		<description></description>
		<content:encoded><![CDATA[I was presented with this example when I was about to write my B.A. thesis in philosophy. It has served me as a good reminder on how not to write good prose. Curiously enough, I couldn't find this on Google. The meta-search engine <a href="http://www.mamma.com/">Mamma</a> however, could find one instance at <a href="http://www.lacasahassel.net/cv/martin/howto.htm">http://www.lacasahassel.net/cv/martin/howto.htm</a>.
<h3>How to kill a healthy sentence</h3>
<ol>
	<li>Begin with a sentence that is clear and direct:
<em>To think clearly, write clearly.</em></li>
	<li>Change its verbs, adjectives, and adverbs into abstract nouns:
<em>For clarity of thought, seek clarity of writing.</em></li>
	<li>Make the sentence passive:
<em>For clarity of thought, clarity of writing should be sought.</em><!--more--></li>
	<li>Use two words where one would do:
<em>For mental process clarity, prose expression clarity should be looked for.</em></li>
	<li>Use plenty of 'in regard to' and 'as to':
<em>For clarity in regard to mental processes, clarity as to prose expression should be looked for.</em></li>
	<li>Sprinkle with words that do not add anything:
<em>For there ever to be any kind of clarity in regard to mental processes, the most fundamental and basic end goal of clarity as to prose expression definitely ought to be looked for to the greatest extent that is possible by every writer.</em></li>
	<li>Put everything in the negative:
<em>For there to be no lack of clarity in regard to mental processes, the most fundamental and basic end goal of clarity in regard to prose expression definitely ought not to be overlooked to the greatest extent that is not at all impossible by all writers.</em></li>
	<li>Repeat the preceding steps. (Several times):
<em>In regard to the issue of clarity, there is no lack of certainty that if there is to be successful avoidance of unclarity in regard to inward mental cognitive activity situation, the basic and fundamental end goal and objective of clarity, in any, indeed in all, written prose expression attempts is not something that can be overlooked without danger or avoided to the greatest degree that is not at all impossible, without exception.</em></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2008-09-04 15:23:44</wp:post_date>
		<wp:post_date_gmt>2008-09-04 13:23:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-kill-a-healthy-sentence</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linguistics"><![CDATA[linguistics]]></category>
	</item>
	<item>
		<title>Shootout - PDF viewers on Linux</title>
		<link>http://mag.icus.se/blog/2008-09-23/shootout-pdf-viewers-on-linux/</link>
		<pubDate>Tue, 23 Sep 2008 14:47:49 +0000</pubDate>
		<dc:creator>magicus</dc:creator>
		<guid isPermaLink="false">http://mag.icus.se/blog/2008-09-23/shootout-pdf-viewers-on-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[I have recently switched my primary desktop computer at home from Windows XP to Linux (Kubuntu Hardy). One of the things I assumed would work out better, but in fact worked out worse, is PDF viewing.

The Acrobat Reader on Windows is a memory-hungry monster, and I assumed that the Linux desktop would be full of lean-and-mean and cool PDF viewers. I was disappointed. I recently gave up and installed Adobe's closed-source reader, and it worked better than all the open source readers I tested. I've been testing kpdf, kghostview and evince. All of them have rendering issues with different PDF files, downloaded from the Internet. I think the best one have been evince, but not even evince have been without rendering bugs.

And then comes the issue of speed.

<!--more-->

I made a simple benchmark on loading a ~ 5 MB large PDF with complex graphics. The PDF is downloaded from <a href="1045-1943-8441-4888-7323-8288">here</a>. (It shows the frequency of MC accidents in the Stockholm area, but that's not really relevant.)

My test included:
<ol>
	<li>Warmup - start the selected application on the PDF from Konqueror. Close the PDF (if possible).</li>
	<li>Open the PDF from the Recently opened menu, and measure time until the PDF is fully rendered.</li>
	<li>Close the application and redo step one, this time measuring the time until the PDF is fully rendered.</li>
</ol>
The warmup step was included to try to populate the cache, so hard disk loading time would not be affecting the test. Anyway, the test is not extremely scientific, since the timing was done by a stop-watch and me looking out for the rendering. So,+/- 1 second is probably a reasonable margin of error.

Nevertheless, the results was interesting:
<table>
<tr>
<td><strong>Application</strong></td>
<td><strong>Load PDF</strong></td>
<td><strong>Start and load PDF</strong></td>
</tr>
<tr>
<td>Adobe Acrobat Reader</td>
<td>13 s</td>
<td>18 s</td>
</tr>
<tr>
<td>KPDF</td>
<td>18 s</td>
<td>19 s</td>
</tr>
<tr>
<td>evince</td>
<td>10 s</td>
<td>13 s</td>
</tr>
</table>
kghostview couldn't render this PDF, so it's unfortunately not included.

So what can you learn from this? Acrobat has the longest loading time, enforcing my intuition on this bloatware. However, it was quite good at rendering time, which was made even better since the partial renderings were shown to the user, making the PDF usable from the first few seconds. Neither of the other PDF viewers made this. They didn't even have a progress meter, making it difficult to know how much longer you'd have to wait to view the PDF.

Evince was by all measures the fastest of the viewers, but they could still do some work on their starup time.

And me..? I'll stick with the Acrobat reader. It's fast enough (better than KPDF, the default in Kubuntu), it gives a good indication on how much is left to load/render, and I have yet to find any rendering issues (not so surprising considering that it's the de facto reference implementation). I tried hard to use the open source alternatives, but they didn't measure up.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2008-09-23 16:47:49</wp:post_date>
		<wp:post_date_gmt>2008-09-23 14:47:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>shootout-pdf-viewers-on-linux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="benchmark"><![CDATA[benchmark]]></category>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<category domain="category" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="category" nicename="pdf"><![CDATA[pdf]]></category>
	</item>
	<item>
		<title>Personal music tag cloud - Last.FM boffin</title>
		<link>http://mag.icus.se/blog/2009-04-04/personal-music-tag-cloud-lastfm-boffin/</link>
		<pubDate>Sat, 04 Apr 2009 15:20:47 +0000</pubDate>
		<dc:creator>magicus</dc:creator>
		<guid isPermaLink="false">http://mag.icus.se/blog/?p=8</guid>
		<description></description>
		<content:encoded><![CDATA[I just discovered a new program from Last.FM -- <a href="http://www.last.fm/group/Audioscrobbler+Beta/forum/30705/_/510180">boffin</a>. It is still in beta, but I encountered no real problems with it (apart from a slight difficulty at installing it in Ubuntu -- solution below). Boffin indexes your personal music collection on your computer, and relates it to the tags given to the artists on Last.FM. As a result, you get a tag cloud descibing your local music collection. This would be cool to have, but not very useful. The great thing is that after the categorization, you can select one or more tags, and start playing music -- from your own music collection -- that matches these tags!

Currently, I'm listening to music tagged <em>ebm</em> or <em>synthpop</em> or <em>darkwave</em>. Music from my own collection. Music I like to listen to, but I never had been able to access in this way.

So, what does my music tag cloud look like? <!--more-->One of the features of boffin is that it can export a list of tag-importance pairs, with the importance value of 1.0 for the most common tag, and a number relative this value for the rest of the tags. This list can be imported into <a href="http://www.wordle.net/">Wordle</a>, and boffin conveniently takes you directly to the upload page with the values loaded on the clipboard. The first time I tried this, though, it made the Wordle java applet crash and bring Firefox down with it (!), so instead I pasted the list to a text editor and just kept the first one third, which was more tags than Wordle could display anyway.

The result is this: <a href="http://www.wordle.net/gallery/wrdl/722224/ihse%27s_last.fm_tag_cloud">a tagcloud of my music collection</a>. It seems to match quite well my idea of what kind of music I have.

<a href="http://mag.icus.se/blog/wp-content/uploads/2009/04/ihse-music-tag-cloud.png"><img class="aligncenter size-full wp-image-9" title="ihse-music-tag-cloud" src="http://mag.icus.se/blog/wp-content/uploads/2009/04/ihse-music-tag-cloud.png" alt="A tag cloud describing my music collection" width="500" height="244" /></a>

So, now the only thing I'm missing is a way to integrate this into my SqueezeCenter solution, so I can play this on my Squeezeboxes, and not just on my computer.

So, how do you install this on Ubuntu? First, download the .deb <a href="http://www.mediafire.com/?mwmilyyyodz">here</a>. (Thanks to <a href="http://www.last.fm/group/Audioscrobbler+Beta/forum/30705/_/510180/10#f8990259">trubazoid</a>!) Then install it with:<em>
sudo dpkg -i boffin_0.0.4-1_i386.deb</em>

Add support for the SQLite DB on QT with:<em>
sudo apt-get install libqt4-sql-sqlite</em>

If you don't have QT installed, you probably need to install more libraries as well.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2009-04-04 16:20:47</wp:post_date>
		<wp:post_date_gmt>2009-04-04 15:20:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>personal-music-tag-cloud-lastfm-boffin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="lastfm"><![CDATA[last.fm]]></category>
		<category domain="category" nicename="music"><![CDATA[music]]></category>
		<category domain="post_tag" nicename="music"><![CDATA[music]]></category>
		<category domain="category" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="post_tag" nicename="tag-cloud"><![CDATA[tag cloud]]></category>
		<category domain="post_tag" nicename="tagging"><![CDATA[tagging]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ihse-music-tag-cloud</title>
		<link>http://mag.icus.se/blog/2009-04-04/personal-music-tag-cloud-lastfm-boffin/ihse-music-tag-cloud/</link>
		<pubDate>Sat, 04 Apr 2009 15:05:28 +0000</pubDate>
		<dc:creator>magicus</dc:creator>
		<guid isPermaLink="false">http://mag.icus.se/blog/wp-content/uploads/2009/04/ihse-music-tag-cloud.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[A tag cloud describing my music collection]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2009-04-04 16:05:28</wp:post_date>
		<wp:post_date_gmt>2009-04-04 15:05:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ihse-music-tag-cloud</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>8</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://mag.icus.se/blog/wp-content/uploads/2009/04/ihse-music-tag-cloud.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/usr/share/wordpress/wp-content/uploads/2009/04/ihse-music-tag-cloud.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:831;s:6:"height";i:406;s:14:"hwstring_small";s:23:"height='62' width='128'";s:4:"file";s:72:"/usr/share/wordpress/wp-content/uploads/2009/04/ihse-music-tag-cloud.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"ihse-music-tag-cloud-150x150.png";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:32:"ihse-music-tag-cloud-300x146.png";s:5:"width";i:300;s:6:"height";i:146;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ffmpeg_airvideo.patch</title>
		<link>http://mag.icus.se/blog/2010-11-16/analyzing-the-airvideo-custom-ffmpeg/ffmpeg_airvideo/</link>
		<pubDate>Tue, 16 Nov 2010 00:16:45 +0000</pubDate>
		<dc:creator>magicus</dc:creator>
		<guid isPermaLink="false">http://mag.icus.se/blog/wp-content/uploads/2010/11/ffmpeg_airvideo.patch</guid>
		<description></description>
		<content:encoded><![CDATA[Patch for custom build of ffmpeg for AirVideo]]></content:encoded>
		<excerpt:encoded><![CDATA[Patch for custom build of ffmpeg for AirVideo]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2010-11-16 01:16:45</wp:post_date>
		<wp:post_date_gmt>2010-11-16 00:16:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ffmpeg_airvideo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>12</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://mag.icus.se/blog/wp-content/uploads/2010/11/ffmpeg_airvideo.patch</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/usr/share/wordpress/wp-content/uploads/2010/11/ffmpeg_airvideo.patch]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Analyzing the Air Video custom ffmpeg</title>
		<link>http://mag.icus.se/blog/2010-11-16/analyzing-the-airvideo-custom-ffmpeg/</link>
		<pubDate>Tue, 16 Nov 2010 00:45:23 +0000</pubDate>
		<dc:creator>magicus</dc:creator>
		<guid isPermaLink="false">http://mag.icus.se/blog/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[When I compiled the custom ffmpeg as describe in the <a href="http://mag.icus.se/blog/2010-11-16/airvideo-on-ubuntu-1010-maverick/">previous post</a>, I got curious to the custom build of ffmpeg that was used. I did some digging into <a href="http://git.ffmpeg.org/">ffmpeg's git repository</a>. First I made an intelligent guess on the approximate whereabout of what the custom build was based on, based on the state of the Changelog. Then I did a quick manual bisecting of git commits, coupled with a manual check if the corresponding changes was or was not present in the Air Video custom ffmpeg source.

This left me to conclude that the custom ffmpeg was based on the source including <a href="http://git.ffmpeg.org/?p=ffmpeg;a=commit;h=3ebca8477a0cad1412212406562b1de1deabde66">this commit</a>. (The snapshot of the git repository at this commit can be <a href="http://git.ffmpeg.org/?p=ffmpeg;a=snapshot;h=3ebca8477a0cad1412212406562b1de1deabde66;sf=tgz">downloaded here</a>.)

Also, the custom source code bundle included libswscale including <a href="http://git.ffmpeg.org/?p=libswscale;a=commitdiff;h=12beb744c2c61620d3259fc832ff1853cef9a9c0">this commit</a>. (Snapshot <a href="http://git.ffmpeg.org/?p=libswscale;a=snapshot;h=132a00bad4a459eca8a26d648e55a01dab51d45f;sf=tgz">here</a>.)

On top of this, they had made some patches to the ffmpeg source code (but none to the libswscale source). I created a patch file, it can be downloaded here: <a href="../wp-content/uploads/2010/11/ffmpeg_airvideo.patch">ffmpeg_airvideo.patch</a>

So, what changes have they made?

<!--more-->

First of all, the patch is quite "clean" in that all new code are put in separate files, and the smallest possible changes are made in the existing files. This is probably good for having a patch outside the main line, but not good for having a patch that eventually could be merged upstream.

My quick analysis is that the changes divide into four parts:
<ol>
	<li>Adding a system for merging subtitles on the output stream, complete with two new command line options.</li>
	<li>Adding a "segmenter" that chunks the file in parts and send them part by part to the client.</li>
	<li>Making fixes for building on Mac OS X or Windows.</li>
	<li>Various other small fixes that might represent actual bugs in ffmpeg, or just be a behaviour that was not suitable for Air Video.</li>
</ol>
The two new command line options are <code>--conversion-id</code> and <code>--port-number</code>. They actually assume that these are the two firstmost command line options (if they are present), and just remove them from the command line argument array before sending it further on to the normal ffmpeg command line processing.

If you want to run a standard ffmpeg for the Air Video server, this is the very first thing it will fail on, complaining that --conversion-id is an unknown argument.

I keep thinking that it would be possible to solve these problems without modifying ffmpeg. For instance, the segmenter seems to be a completely stand-alone program. It is started by:
<code>
if (argc &gt; 1 &amp;&amp; strcmp(argv[1], "segmenter") == 0)
{
    return segmenter_main(argc, argv);
}</code>

in the new main method that they provide in _overlay.c, which supersedes ffmpeg's original main method, and the file implementing segmenter_main (_segmenter.c) does not include any ffmpeg-specific header files.

The overlay stuff is used to merge subtitles into the video stream. Appearantly, the Java server acts as a "overlay server" for ffmpeg, which openes a connection to the Java server (only on localhost, on the port provided on the command line) and requests "overlays" for specific parts of the movie, which are then returned by the server and merged on the video stream by the patched ffmpeg.

Interesting solution. Still, I have the feeling this could be made in another manner which would not require patching ffmpeg. No good suggestions right now, though.

If these changes could be moved out of ffmpeg, it would really help in making it easier to deploy this on Linux. Or to have distributions ship this as a package. I'd love to do "sudo apt-get install airvideoserver"...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2010-11-16 01:45:23</wp:post_date>
		<wp:post_date_gmt>2010-11-16 00:45:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>analyzing-the-airvideo-custom-ffmpeg</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="airvideo"><![CDATA[airvideo]]></category>
		<category domain="post_tag" nicename="ffmpeg"><![CDATA[ffmpeg]]></category>
		<category domain="post_tag" nicename="ipad"><![CDATA[ipad]]></category>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="category" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[open source]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Air Video on Ubuntu 10.10 (maverick)</title>
		<link>http://mag.icus.se/blog/2010-11-16/airvideo-on-ubuntu-1010-maverick/</link>
		<pubDate>Mon, 15 Nov 2010 23:35:09 +0000</pubDate>
		<dc:creator>magicus</dc:creator>
		<guid isPermaLink="false">http://mag.icus.se/blog/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[I've recently gotten myself an iPad. Of course you want to watch  videos on an iPad, right? Of couse you want them optimized for the iPad  hardware, right? Of course you don't want to do that ahead of time and  transfer to the iPad, but on-the-fly directly from your media library,  right?

There's an app for that! (Surprise...) Probably several. But the one that rocks is <a title="AirVideo" href="http://www.inmethod.com/air-video/index.html">Air Video</a>.

Air Video needs a special server, and it need quite competent hardware  to do on-the-fly conversion. But the server is only distributed for  Windows and Mac OS X (once again: surprise...). Fortunately, it is quite  easy to get it running under Linux. This is what I did.

<!--more-->

The server consists basically of two parts, a Java jar file and a  special build of ffmpeg that is called from the Java server to do the  actual conversion.

Basically following the hints on  http://wiki.birth-online.de/know-how/hardware/apple-iphone/airvideo-server-linux,  but simplifying as much as possible, I did the following steps:
<ol>
	<li>Download Alpha 4 of the jar file <a href="http://inmethod.com/air-video/download/linux/alpha4/AirVideoServerLinux.jar">here</a>. You might want to check for a newer version <a href="http://www.inmethod.com/forum/posts/list/1856.page">here</a>. Save it somewhere nice, like /usr/local/lib/airvideo.</li>
	<li>Download the source code for the patched ffmpeg <a href="http://www.inmethod.com/air-video/download/ffmpeg-for-2.2.5.tar.bz2">here</a>. (That is for Air Video version 2.2.5; you might want to check for a newer version <a href="http://www.inmethod.com/air-video/licenses.html">here</a>.) Save it somewhere temporary, e.g. /tmp/airvideo_ffmpeg</li>
	<li>At the command line, run <code>sudo apt-get install faac libx264-dev libmp3lame-dev libfaad-dev mpeg4ip-server git-core pkg-config</code> to install tools needed to build the ffmpeg and to run the Air Video server.</li>
	<li>Build the custom ffmpeg and install it in /usr/local/bin by:<code>
./configure --enable-pthreads --disable-shared --enable-static  --enable-gpl --enable-libx264 --enable-libmp3lame --enable-libfaad  --disable-decoder=aac
make
sudo make install
</code></li>
	<li>Create a configuration file in e.g. /usr/local/etc/airvideo.properties, containing:<code>
path.ffmpeg = /usr/local/bin/ffmpeg
path.mp4creator = /usr/bin/mp4creator
path.faac = /usr/bin/faac
password =
subtitles.encoding = windows-1250
subtitles.font = Verdana
folders = Movies:/path/to/my/Movies,MoreMovies:/path/to/more/Movies</code>
Replace the value for "folders" with something that match your system.</li>
	<li>Now you can start the server by:
<code>java -jar /usr/local/lib/airvideo/AirVideoServerLinux.jar /usr/local/etc/airvideo.properties</code></li>
	<li>As a bonus, to get autodiscovery to work, add a file /etc/avahi/services/airvideo.service containing:<code>
&lt;?xml version="1.0" standalone='no'?&gt;&lt;!--*-nxml-*--&gt;
&lt;!DOCTYPE service-group SYSTEM "avahi-service.dtd"&gt;
&lt;service-group&gt;
&lt;name replace-wildcards="yes"&gt;%h Air Video server&lt;/name&gt;
&lt;service&gt;
&lt;type&gt;_airvideoserver._tcp&lt;/type&gt;
&lt;port&gt;45631&lt;/port&gt;
&lt;/service&gt;
&lt;/service-group&gt;
</code></li>
	<li>Restart the bonjour service avahi by <code>sudo service avahi-daemon restart</code></li>
	<li>That shoud be it! Now you should be able to find your server from  the Air Video app, and you should be able to play videos on it by  on-the-fly conversion, just if you had been using the server under  Windows or Mac OS X.</li>
	<li>(Starting the service automatically is left as an excercise for the reader; see <a href="http://wiki.birth-online.de/know-how/hardware/apple-iphone/airvideo-server-linux">mbirth's wiki</a> for a suggestion on how to do this.)</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2010-11-16 00:35:09</wp:post_date>
		<wp:post_date_gmt>2010-11-15 23:35:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>airvideo-on-ubuntu-1010-maverick</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="airvideo"><![CDATA[airvideo]]></category>
		<category domain="post_tag" nicename="ipad"><![CDATA[ipad]]></category>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="category" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2485</wp:comment_id>
			<wp:comment_author><![CDATA[magicus]]></wp:comment_author>
			<wp:comment_author_email>mag@icus.se</wp:comment_author_email>
			<wp:comment_author_url>http://mag.icus.se/blog/about</wp:comment_author_url>
			<wp:comment_author_IP>193.9.13.134</wp:comment_author_IP>
			<wp:comment_date>2010-11-24 13:41:27</wp:comment_date>
			<wp:comment_date_gmt>2010-11-24 12:41:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Tyler: At what step did you get that message? Can you copy and paste it with a bit more context?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2483</wp:comment_id>
			<wp:comment_author><![CDATA[Tyler]]></wp:comment_author>
			<wp:comment_author_email>tdhz77@mizzou.edu</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.17.241.215</wp:comment_author_IP>
			<wp:comment_date>2010-11-24 12:16:13</wp:comment_date>
			<wp:comment_date_gmt>2010-11-24 11:16:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I get a "Get the latest server update, error" I followed your directions :(

Ubuntu Maverick 64 bit.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3224</wp:comment_id>
			<wp:comment_author><![CDATA[Kent]]></wp:comment_author>
			<wp:comment_author_email>graystaff@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://na</wp:comment_author_url>
			<wp:comment_author_IP>67.2.126.134</wp:comment_author_IP>
			<wp:comment_date>2010-12-26 16:34:20</wp:comment_date>
			<wp:comment_date_gmt>2010-12-26 15:34:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have not actually tried this yet but based on others feedback it, looks like it should work. I've got to rebuild my MythTV system then I'll add this in. I've been running their "official" version on my MAC with a link to the MythTV modified "pretty" directory. It works but is a bit of a pain. I now will only have to keep one system up (greener) and not logged in all the time. I just wanted to say a BIG thanks for sharing! Folks like you make computing enjoyable!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2553</wp:comment_id>
			<wp:comment_author><![CDATA[jauntyj]]></wp:comment_author>
			<wp:comment_author_email>jauntyj@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>99.247.158.65</wp:comment_author_IP>
			<wp:comment_date>2010-12-03 05:16:02</wp:comment_date>
			<wp:comment_date_gmt>2010-12-03 04:16:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am getting stuck at step 4:

Build the custom ffmpeg and install it in /usr/local/bin by:
./configure --enable-pthreads --disable-shared --enable-static --enable-gpl --enable-libx264 --enable-libmp3lame --enable-libfaad --disable-decoder=aac

The error i am getting is as follows:
Unknown C compiler gcc
gcc is unable to create an executable file
C compiler test fail]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2446</wp:comment_id>
			<wp:comment_author><![CDATA[Bob]]></wp:comment_author>
			<wp:comment_author_email>Bob_smith@prodigy.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.149.141.130</wp:comment_author_IP>
			<wp:comment_date>2010-11-19 04:51:05</wp:comment_date>
			<wp:comment_date_gmt>2010-11-19 03:51:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Perfect

I forgot my notes for reinstalling it]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2524</wp:comment_id>
			<wp:comment_author><![CDATA[Tyler]]></wp:comment_author>
			<wp:comment_author_email>tdhz77@mizzou.edu</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.17.241.215</wp:comment_author_IP>
			<wp:comment_date>2010-11-30 00:57:55</wp:comment_date>
			<wp:comment_date_gmt>2010-11-29 23:57:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The error came from the iPad AirVideo client, but stopped as soon as I restarted the server. Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3580</wp:comment_id>
			<wp:comment_author><![CDATA[Franklin]]></wp:comment_author>
			<wp:comment_author_email>fr@nkl.in</wp:comment_author_email>
			<wp:comment_author_url>http://frankl.in/</wp:comment_author_url>
			<wp:comment_author_IP>83.160.124.172</wp:comment_author_IP>
			<wp:comment_date>2011-01-14 16:17:58</wp:comment_date>
			<wp:comment_date_gmt>2011-01-14 15:17:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for this howto, it works great!
For timesaving could you add these packages to step 3?

default-jre-headless -- the java bin
ffmpegthumbnailer -- generates the airvideo thumbs
gcc
screen -- to run airvideo on remote servers]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2414</wp:comment_id>
			<wp:comment_author><![CDATA[Analyzing the AirVideo custom ffmpeg &#8211; magicus]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://mag.icus.se/blog/2010-11-16/analyzing-the-airvideo-custom-ffmpeg/</wp:comment_author_url>
			<wp:comment_author_IP>77.110.63.65</wp:comment_author_IP>
			<wp:comment_date>2010-11-16 01:45:27</wp:comment_date>
			<wp:comment_date_gmt>2010-11-16 00:45:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] I compiled the custom ffmpeg as describe in the previous post, I got curious to the custom build of ffmpeg that was used. I did some digging into ffmpeg&#8217;s [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3023</wp:comment_id>
			<wp:comment_author><![CDATA[magicus]]></wp:comment_author>
			<wp:comment_author_email>mag@icus.se</wp:comment_author_email>
			<wp:comment_author_url>http://mag.icus.se/blog/about</wp:comment_author_url>
			<wp:comment_author_IP>77.110.63.65</wp:comment_author_IP>
			<wp:comment_date>2010-12-16 15:42:15</wp:comment_date>
			<wp:comment_date_gmt>2010-12-16 14:42:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jauntyj: Do you have gcc installed? I probably missed mentioning some basic packages that I already had installed. One way to install these is by:

sudo apt-get build-dep ffmpeg

I think that should install all you need (and more) to build ffmpeg, including gcc.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
</channel>
</rss>
